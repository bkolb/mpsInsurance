package ProductDescription.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import com.mbeddr.core.expressions.structure.Expression;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class TestCase extends BaseConcept {
  public static final String concept = "ProductDescription.structure.TestCase";
  public static final String EXPECTED_RESULT = "expectedResult";
  public static final String ACTUAL_RESULT = "actualResult";
  public static final String INPUT_VALUES = "inputValues";

  public TestCase(SNode node) {
    super(node);
  }

  public Expression getExpectedResult() {
    return (Expression) this.getChild(Expression.class, TestCase.EXPECTED_RESULT);
  }

  public void setExpectedResult(Expression node) {
    super.setChild(TestCase.EXPECTED_RESULT, node);
  }

  public StringWrapper getActualResult() {
    return (StringWrapper) this.getChild(StringWrapper.class, TestCase.ACTUAL_RESULT);
  }

  public void setActualResult(StringWrapper node) {
    super.setChild(TestCase.ACTUAL_RESULT, node);
  }

  public int getInputValuesesCount() {
    return this.getChildCount(TestCase.INPUT_VALUES);
  }

  public Iterator<Expression> inputValueses() {
    return this.children(Expression.class, TestCase.INPUT_VALUES);
  }

  public List<Expression> getInputValueses() {
    return this.getChildren(Expression.class, TestCase.INPUT_VALUES);
  }

  public void addInputValues(Expression node) {
    this.addChild(TestCase.INPUT_VALUES, node);
  }

  public void insertInputValues(Expression prev, Expression node) {
    this.insertChild(prev, TestCase.INPUT_VALUES, node);
  }

  public static TestCase newInstance(SModel sm, boolean init) {
    return (TestCase) SModelUtil_new.instantiateConceptDeclaration("ProductDescription.structure.TestCase", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static TestCase newInstance(SModel sm) {
    return TestCase.newInstance(sm, false);
  }
}
