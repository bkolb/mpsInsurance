package ProductDescription.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class CompositeProductType extends ProductType {
  public static final String concept = "ProductDescription.structure.CompositeProductType";
  public static final String CONTAINED_PRODUCTS = "containedProducts";

  public CompositeProductType(SNode node) {
    super(node);
  }

  public int getContainedProductsesCount() {
    return this.getChildCount(CompositeProductType.CONTAINED_PRODUCTS);
  }

  public Iterator<ProductTypeRef> containedProductses() {
    return this.children(ProductTypeRef.class, CompositeProductType.CONTAINED_PRODUCTS);
  }

  public List<ProductTypeRef> getContainedProductses() {
    return this.getChildren(ProductTypeRef.class, CompositeProductType.CONTAINED_PRODUCTS);
  }

  public void addContainedProducts(ProductTypeRef node) {
    this.addChild(CompositeProductType.CONTAINED_PRODUCTS, node);
  }

  public void insertContainedProducts(ProductTypeRef prev, ProductTypeRef node) {
    this.insertChild(prev, CompositeProductType.CONTAINED_PRODUCTS, node);
  }

  public static CompositeProductType newInstance(SModel sm, boolean init) {
    return (CompositeProductType) SModelUtil_new.instantiateConceptDeclaration("ProductDescription.structure.CompositeProductType", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static CompositeProductType newInstance(SModel sm) {
    return CompositeProductType.newInstance(sm, false);
  }
}
