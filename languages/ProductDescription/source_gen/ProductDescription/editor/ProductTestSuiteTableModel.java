package ProductDescription.editor;

/*Generated by MPS */

import jetbrains.mps.lang.editor.table.runtime.TableModel;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import ProductDescription.behavior.TestCase_Behavior;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.nodeEditor.cellMenu.NodeSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;

public class ProductTestSuiteTableModel implements TableModel {
  private SNode product;
  private EditorContext editorCtx;

  public ProductTestSuiteTableModel(SNode product, EditorContext editorCtx) {
    this.product = product;
    this.editorCtx = editorCtx;
  }

  public void insertColumn(int columnNumber) {
  }

  public void deleteColumn(int columnNumber) {
  }

  public void insertRow(int rowNumber) {
    if (rowNumber == 0) {
      return;
    }
    SNode tc = SConceptOperations.createNewNode("ProductDescription.structure.TestCase", null);
    TestCase_Behavior.call_initialize_1850134002004986963(tc, attrCount());
    ListSequence.fromList(cases()).insertElement(rowNumber - 1, tc);
  }

  public NodeSubstituteInfo getSubstituteInfo(int row, int column) {
    if (row == 0) {
      if (column >= attrCount()) {
        return null;
      } else {
        return new DefaultChildSubstituteInfo(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(product, "testcase", true), "attributes", true)).getElement(column), getValueAt(row, column), SLinkOperations.findLinkDeclaration("ProductDescription.structure.ProductTestSuite", "attributes"), editorCtx);
      }
    } else {
      if (column < attrCount()) {
        return new DefaultChildSubstituteInfo(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(product, "testcase", true), "cases", true)).getElement(row - 1), getValueAt(row, column), SLinkOperations.findLinkDeclaration("ProductDescription.structure.TestCase", "inputValues"), editorCtx);
      } else {
        if (column == attrCount()) {
          return new DefaultChildSubstituteInfo(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(product, "testcase", true), "cases", true)).getElement(row - 1), getValueAt(row, column), SLinkOperations.findLinkDeclaration("ProductDescription.structure.TestCase", "expectedResult"), editorCtx);
        } else {
          return new DefaultChildSubstituteInfo(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(product, "testcase", true), "cases", true)).getElement(row - 1), getValueAt(row, column), SLinkOperations.findLinkDeclaration("ProductDescription.structure.TestCase", "actualResult"), editorCtx);
        }
      }
    }
  }

  public void createElement(int row, int column) {
  }

  public SNode getValueAt(int row, int column) {
    if (row == 0) {
      if (column < attrCount()) {
        return ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(this.product, "testcase", true), "attributes", true)).getElement(column);
      } else {
        return null;
      }
    } else {
      SNode testcase = ListSequence.fromList(cases()).getElement(row - 1);
      if (column < ListSequence.fromList(SLinkOperations.getTargets(testcase, "inputValues", true)).count()) {
        return ListSequence.fromList(SLinkOperations.getTargets(testcase, "inputValues", true)).getElement(column);
      } else {
        if (column == (int) ListSequence.fromList(SLinkOperations.getTargets(testcase, "inputValues", true)).count()) {
          return SLinkOperations.getTarget(testcase, "expectedResult", true);
        } else {
          return SLinkOperations.getTarget(testcase, "actualResult", true);
        }
      }
    }
  }

  public void deleteRow(int rowNumber) {
    if (rowNumber != 0) {
      ListSequence.fromList(cases()).removeElementAt(rowNumber);
    }
  }

  public int getRowCount() {
    return ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(this.product, "testcase", true), "cases", true)).count() + 1;
  }

  public int getColumnCount() {
    return attrCount() + 2;
  }

  public int attrCount() {
    return ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(this.product, "testcase", true), "attributes", true)).count();
  }

  public List<SNode> cases() {
    return SLinkOperations.getTargets(SLinkOperations.getTarget(this.product, "testcase", true), "cases", true);
  }
}
