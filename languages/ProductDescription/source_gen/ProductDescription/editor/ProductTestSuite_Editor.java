package ProductDescription.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cells.EditorCell_Property;
import jetbrains.mps.nodeEditor.cells.ModelAccessor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import ProductDescription.behavior.TestCase_Behavior;
import jetbrains.mps.util.EqualUtil;
import jetbrains.mps.nodeEditor.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_Empty;
import jetbrains.mps.nodeEditor.cells.EditorCell_Component;
import jetbrains.mps.lang.editor.table.runtime.TableModelCreator;
import jetbrains.mps.lang.editor.table.runtime.TableModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.editor.table.runtime.EditorCell_Table;
import javax.swing.JComponent;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import jetbrains.mps.smodel.ModelAccess;
import ProductDescription.typesystem.RateCalculator;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class ProductTestSuite_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_m3bw6i_a(editorContext, node);
  }

  private EditorCell createCollection_m3bw6i_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_m3bw6i_a");
    editorCell.addEditorCell(this.createConstant_m3bw6i_a0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_m3bw6i_b0(editorContext, node));
    editorCell.addEditorCell(this.createJComponent_m3bw6i_c0(editorContext, node));
    return editorCell;
  }

  private EditorCell createCollection_m3bw6i_b0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_m3bw6i_b0");
    editorCell.setCanBeFolded(true);
    editorCell.setFoldedCell(this.createReadOnlyModelAccessor_m3bw6i_a1a(editorContext, node));
    editorCell.addEditorCell(this.createTable_m3bw6i_a1a(editorContext, node));
    return editorCell;
  }

  private EditorCell createConstant_m3bw6i_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "tests");
    editorCell.setCellId("Constant_m3bw6i_a0");
    editorCell.addKeyMap(new RunTest());
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createReadOnlyModelAccessor_m3bw6i_a1a(final EditorContext editorContext, final SNode node) {
    EditorCell_Property editorCell = EditorCell_Property.create(editorContext, new ModelAccessor() {
      public String getText() {
        boolean allTestsOk = true;
        for (SNode c : ListSequence.fromList(SLinkOperations.getTargets(node, "cases", true))) {
          if (!(TestCase_Behavior.call_isOK_8331426562765930348(c))) {
            allTestsOk = false;
            break;
          }
        }
        return (allTestsOk ?
          "all tests ok" :
          "FAILED (at least one)"
        );
      }

      public void setText(String s) {
      }

      public boolean isValidText(String s) {
        return EqualUtil.equals(s, this.getText());
      }
    }, node);
    editorCell.setAction(CellActionType.DELETE, new CellAction_Empty());
    editorCell.setCellId("ReadOnlyModelAccessor_m3bw6i_a1a");
    return editorCell;
  }

  private EditorCell createReadOnlyModelAccessor_m3bw6i_a0(final EditorContext editorContext, final SNode node) {
    EditorCell_Property editorCell = EditorCell_Property.create(editorContext, new ModelAccessor() {
      public String getText() {
        boolean allTestsOk = true;
        for (SNode c : ListSequence.fromList(SLinkOperations.getTargets(node, "cases", true))) {
          if (!(TestCase_Behavior.call_isOK_8331426562765930348(c))) {
            allTestsOk = false;
            break;
          }
        }
        return (allTestsOk ?
          "all tests ok" :
          "some tests failed"
        );
      }

      public void setText(String s) {
      }

      public boolean isValidText(String s) {
        return EqualUtil.equals(s, this.getText());
      }
    }, node);
    editorCell.setAction(CellActionType.DELETE, new CellAction_Empty());
    editorCell.setCellId("ReadOnlyModelAccessor_m3bw6i_a0");
    return editorCell;
  }

  private EditorCell createJComponent_m3bw6i_c0(EditorContext editorContext, SNode node) {
    EditorCell editorCell = EditorCell_Component.createComponentCell(editorContext, node, ProductTestSuite_Editor._QueryFunction_JComponent_m3bw6i_a2a(node, editorContext), "_m3bw6i_c0");
    editorCell.setCellId("JComponent_m3bw6i_c0");
    return editorCell;
  }

  private EditorCell createTable_m3bw6i_a1a(EditorContext editorContext, SNode node) {
    TableModelCreator creator = new TableModelCreator() {
      public TableModel getTable(final SNode node, final EditorContext editorContext) {
        return new ProductTestSuiteTableModel(SNodeOperations.cast(SNodeOperations.getParent(node), "ProductDescription.structure.ProductType"), editorContext);
      }
    };
    EditorCell_Collection editorCell = EditorCell_Table.createTable(editorContext, node, creator.getTable(node, editorContext), "Table_m3bw6i_a1a");
    editorCell.setCellId("Table_m3bw6i_a1a_0");
    return editorCell;
  }

  private static JComponent _QueryFunction_JComponent_m3bw6i_a2a(SNode node, EditorContext editorContext) {
    JButton b = new JButton("evaluate");
    final SNode suite = node;
    b.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        ModelAccess.instance().runWriteActionInCommand(new Runnable() {
          public void run() {
            for (SNode tc : ListSequence.fromList(SLinkOperations.getTargets(suite, "cases", true))) {
              int result = new RateCalculator(tc).calculate(SLinkOperations.getTarget(SNodeOperations.getAncestor(suite, "ProductDescription.structure.ProductType", true, false), "rateCalculation", true));
              SPropertyOperations.set(SLinkOperations.getTarget(tc, "actualResult", true), "value", result + "");
            }
          }
        });
      }
    });
    return b;
  }
}
