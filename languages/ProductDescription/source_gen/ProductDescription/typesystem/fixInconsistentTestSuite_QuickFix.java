package ProductDescription.typesystem;

/*Generated by MPS */

import jetbrains.mps.errors.QuickFix_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import java.util.ArrayList;
import ProductDescription.behavior.ProductType_Behavior;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public class fixInconsistentTestSuite_QuickFix extends QuickFix_Runtime {
  public fixInconsistentTestSuite_QuickFix() {
  }

  public void execute(SNode node) {
    SNode product = SNodeOperations.cast(SNodeOperations.getParent(((SNode) fixInconsistentTestSuite_QuickFix.this.getField("suite")[0])), "ProductDescription.structure.ProductType");
    List<SNode> attrs = new ArrayList<SNode>();
    ProductType_Behavior.call_allAttributes_3975765255154863205(product, attrs);

    for (final SNode pa : ListSequence.fromList(attrs)) {
      SNode attrRef = ListSequence.fromList(SLinkOperations.getTargets(((SNode) fixInconsistentTestSuite_QuickFix.this.getField("suite")[0]), "attributes", true)).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SLinkOperations.getTarget(it, "attr", false) == pa;
        }
      });
      if (attrRef == null) {
        for (SNode tc : ListSequence.fromList(SLinkOperations.getTargets(((SNode) fixInconsistentTestSuite_QuickFix.this.getField("suite")[0]), "cases", true))) {
          SLinkOperations.addNewChild(tc, "inputValues", "com.mbeddr.core.expressions.structure.Expression");
        }
        SNode ref = SConceptOperations.createNewNode("ProductDescription.structure.AttributeRef", null);
        SLinkOperations.setTarget(ref, "attr", pa, false);
        ListSequence.fromList(SLinkOperations.getTargets(((SNode) fixInconsistentTestSuite_QuickFix.this.getField("suite")[0]), "attributes", true)).addElement(ref);
      }
    }
    for (final SNode attrRef : ListSequence.fromList(SLinkOperations.getTargets(((SNode) fixInconsistentTestSuite_QuickFix.this.getField("suite")[0]), "attributes", true))) {
      SNode pa = ListSequence.fromList(attrs).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SLinkOperations.getTarget(attrRef, "attr", false) == it;
        }
      });
      if (pa == null) {
        ListSequence.fromList(SLinkOperations.getTargets(((SNode) fixInconsistentTestSuite_QuickFix.this.getField("suite")[0]), "cases", true)).visitAll(new IVisitor<SNode>() {
          public void visit(SNode it) {
            ListSequence.fromList(SLinkOperations.getTargets(it, "inputValues", true)).removeElementAt(SNodeOperations.getIndexInParent(attrRef));
          }
        });
        ListSequence.fromList(SLinkOperations.getTargets(((SNode) fixInconsistentTestSuite_QuickFix.this.getField("suite")[0]), "attributes", true)).removeElement(attrRef);
      }
    }
  }
}
