package ProductDescription.typesystem;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class RateCalculator {
  private Map<SNode, SNode> attrValues = MapSequence.fromMap(new HashMap<SNode, SNode>());

  public RateCalculator(SNode tc) {
    SNode suite = SNodeOperations.cast(SNodeOperations.getParent(tc), "ProductDescription.structure.ProductTestSuite");
    for (SNode iv : ListSequence.fromList(SLinkOperations.getTargets(tc, "inputValues", true))) {
      MapSequence.fromMap(attrValues).put(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(suite, "attributes", true)).getElement(SNodeOperations.getIndexInParent(iv)), "attr", false), iv);
    }
  }

  public int calculate(SNode n) {
    return dispatch0(n);
  }

  public boolean evalComparison(SNode n) {
    return dispatch1(n);
  }

  public int evalDecTab(SNode dectab) {
    for (SNode x : ListSequence.fromList(SLinkOperations.getTargets(dectab, "xExpr", true))) {
      for (SNode y : ListSequence.fromList(SLinkOperations.getTargets(dectab, "yExpr", true))) {
        if (evalComparison(x) && evalComparison(y)) {
          return calculate(ListSequence.fromList(SLinkOperations.getTargets(dectab, "cExpr", true)).getElement((SNodeOperations.getIndexInParent(y)) * (ListSequence.fromList(SLinkOperations.getTargets(dectab, "xExpr", true)).count()) + (SNodeOperations.getIndexInParent(x))));
        }
      }
    }
    return calculate(SLinkOperations.getTarget(dectab, "def", true));
  }

  public int dispatch0(SNode candidate) {
    if (SNodeOperations.isInstanceOf(candidate, "ProductDescription.structure.AttributeRef")) {
      return calculate(MapSequence.fromMap(attrValues).get(SLinkOperations.getTarget(SNodeOperations.cast(candidate, "ProductDescription.structure.AttributeRef"), "attr", false)));
    }
    if (SNodeOperations.isInstanceOf(candidate, "com.mbeddr.core.expressions.structure.PlusExpression")) {
      return calculate(SLinkOperations.getTarget(SNodeOperations.cast(candidate, "com.mbeddr.core.expressions.structure.PlusExpression"), "left", true)) + calculate(SLinkOperations.getTarget(SNodeOperations.cast(candidate, "com.mbeddr.core.expressions.structure.PlusExpression"), "right", true));
    }
    if (SNodeOperations.isInstanceOf(candidate, "com.mbeddr.core.expressions.structure.MinusExpression")) {
      return calculate(SLinkOperations.getTarget(SNodeOperations.cast(candidate, "com.mbeddr.core.expressions.structure.MinusExpression"), "left", true)) - calculate(SLinkOperations.getTarget(SNodeOperations.cast(candidate, "com.mbeddr.core.expressions.structure.MinusExpression"), "right", true));
    }
    if (SNodeOperations.isInstanceOf(candidate, "com.mbeddr.core.expressions.structure.MultiExpression")) {
      return calculate(SLinkOperations.getTarget(SNodeOperations.cast(candidate, "com.mbeddr.core.expressions.structure.MultiExpression"), "left", true)) * calculate(SLinkOperations.getTarget(SNodeOperations.cast(candidate, "com.mbeddr.core.expressions.structure.MultiExpression"), "right", true));
    }
    if (SNodeOperations.isInstanceOf(candidate, "com.mbeddr.core.expressions.structure.DivExpression")) {
      return calculate(SLinkOperations.getTarget(SNodeOperations.cast(candidate, "com.mbeddr.core.expressions.structure.DivExpression"), "left", true)) / calculate(SLinkOperations.getTarget(SNodeOperations.cast(candidate, "com.mbeddr.core.expressions.structure.DivExpression"), "right", true));
    }
    if (SNodeOperations.isInstanceOf(candidate, "com.mbeddr.core.expressions.structure.NumberLiteral")) {
      return Integer.parseInt(SPropertyOperations.getString(SNodeOperations.cast(candidate, "com.mbeddr.core.expressions.structure.NumberLiteral"), "value"));
    }
    if (SNodeOperations.isInstanceOf(candidate, "com.mbeddr.core.util.structure.DecTab")) {
      return evalDecTab(SNodeOperations.cast(candidate, "com.mbeddr.core.util.structure.DecTab"));
    }
    return 0;
  }

  public boolean dispatch1(SNode candidate) {
    if (SNodeOperations.isInstanceOf(candidate, "com.mbeddr.core.expressions.structure.GreaterExpression")) {
      return calculate(SLinkOperations.getTarget(SNodeOperations.cast(candidate, "com.mbeddr.core.expressions.structure.GreaterExpression"), "left", true)) > calculate(SLinkOperations.getTarget(SNodeOperations.cast(candidate, "com.mbeddr.core.expressions.structure.GreaterExpression"), "right", true));
    }
    if (SNodeOperations.isInstanceOf(candidate, "com.mbeddr.core.expressions.structure.GreaterEqualsExpression")) {
      return calculate(SLinkOperations.getTarget(SNodeOperations.cast(candidate, "com.mbeddr.core.expressions.structure.GreaterEqualsExpression"), "left", true)) >= calculate(SLinkOperations.getTarget(SNodeOperations.cast(candidate, "com.mbeddr.core.expressions.structure.GreaterEqualsExpression"), "right", true));
    }
    if (SNodeOperations.isInstanceOf(candidate, "com.mbeddr.core.expressions.structure.LessExpression")) {
      return calculate(SLinkOperations.getTarget(SNodeOperations.cast(candidate, "com.mbeddr.core.expressions.structure.LessExpression"), "left", true)) < calculate(SLinkOperations.getTarget(SNodeOperations.cast(candidate, "com.mbeddr.core.expressions.structure.LessExpression"), "right", true));
    }
    if (SNodeOperations.isInstanceOf(candidate, "com.mbeddr.core.expressions.structure.LessEqualsExpression")) {
      return calculate(SLinkOperations.getTarget(SNodeOperations.cast(candidate, "com.mbeddr.core.expressions.structure.LessEqualsExpression"), "left", true)) <= calculate(SLinkOperations.getTarget(SNodeOperations.cast(candidate, "com.mbeddr.core.expressions.structure.LessEqualsExpression"), "right", true));
    }
    if (SNodeOperations.isInstanceOf(candidate, "com.mbeddr.core.expressions.structure.EqualsExpression")) {
      return calculate(SLinkOperations.getTarget(SNodeOperations.cast(candidate, "com.mbeddr.core.expressions.structure.EqualsExpression"), "left", true)) == calculate(SLinkOperations.getTarget(SNodeOperations.cast(candidate, "com.mbeddr.core.expressions.structure.EqualsExpression"), "right", true));
    }
    if (SNodeOperations.isInstanceOf(candidate, "com.mbeddr.core.expressions.structure.NotEqualsExpression")) {
      return calculate(SLinkOperations.getTarget(SNodeOperations.cast(candidate, "com.mbeddr.core.expressions.structure.NotEqualsExpression"), "left", true)) != calculate(SLinkOperations.getTarget(SNodeOperations.cast(candidate, "com.mbeddr.core.expressions.structure.NotEqualsExpression"), "right", true));
    }
    return false;
  }
}
