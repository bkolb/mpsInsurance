package ProductDescription.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_ProductTestSuite_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_ProductTestSuite_InferenceRule() {
  }

  public void applyRule(final SNode pts, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    for (SNode attrRef : ListSequence.fromList(SLinkOperations.getTargets(pts, "attributes", true))) {
      for (SNode c : ListSequence.fromList(SLinkOperations.getTargets(pts, "cases", true))) {
        {
          SNode _nodeToCheck_1029348928467 = ListSequence.fromList(SLinkOperations.getTargets(c, "inputValues", true)).getElement(SNodeOperations.getIndexInParent(attrRef));
          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:a843dbff-e2d6-4d50-a0a3-752640797e15(ProductDescription.typesystem)", "8331426562766079820", 0, null);
          typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:a843dbff-e2d6-4d50-a0a3-752640797e15(ProductDescription.typesystem)", "8331426562766079808", true), (SNode) typeCheckingContext.typeOf(attrRef, "r:a843dbff-e2d6-4d50-a0a3-752640797e15(ProductDescription.typesystem)", "8331426562766079825", true), false, true, _info_12389875345);
        }
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "ProductDescription.structure.ProductTestSuite";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
